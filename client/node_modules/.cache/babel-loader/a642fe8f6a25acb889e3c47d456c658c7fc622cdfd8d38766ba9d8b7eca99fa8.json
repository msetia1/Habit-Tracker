{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Projects/habit-tracker/client/src/components/LogHabitDialog.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, Box, FormControl, InputLabel, Select, MenuItem, Typography } from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { habitAPI } from '../services/api';\n\n/**\n * Dialog component for logging habit completions\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogHabitDialog = ({\n  open,\n  onClose,\n  habit,\n  onSuccess\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: new Date(),\n    count: 1\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date\n    }));\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async () => {\n    try {\n      setLoading(true);\n      setError('');\n\n      // Format the data for API\n      const logData = {\n        date: formData.date.toISOString(),\n        count: Number(formData.count)\n      };\n\n      // Call API to log completion\n      await habitAPI.logCompletion(habit.id, logData);\n\n      // Success callback\n      if (onSuccess) {\n        onSuccess();\n      }\n\n      // Close dialog\n      onClose();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error logging habit completion:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to log habit completion');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetForm = () => {\n    setFormData({\n      date: new Date(),\n      count: 1\n    });\n    setError('');\n  };\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: [\"Log Completion: \", habit === null || habit === void 0 ? void 0 : habit.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          pt: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n          label: \"Completion Date\",\n          value: formData.date,\n          onChange: handleDateChange,\n          slotProps: {\n            textField: {\n              fullWidth: true\n            }\n          },\n          maxDate: new Date()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"count\",\n          label: \"Completion Count\",\n          type: \"number\",\n          value: formData.count,\n          onChange: handleInputChange,\n          fullWidth: true,\n          inputProps: {\n            min: 1\n          },\n          helperText: `Target: ${(habit === null || habit === void 0 ? void 0 : habit.targetCount) || 1} per ${habit === null || habit === void 0 ? void 0 : habit.frequency}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          variant: \"body2\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        disabled: loading,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: loading,\n        children: loading ? 'Saving...' : 'Log Completion'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(LogHabitDialog, \"bS7AWNANuPVsvgWylgF8i969q1A=\");\n_c = LogHabitDialog;\nexport default LogHabitDialog;\nvar _c;\n$RefreshReg$(_c, \"LogHabitDialog\");","map":{"version":3,"names":["React","useState","Dialog","DialogTitle","DialogContent","DialogActions","Button","TextField","Box","FormControl","InputLabel","Select","MenuItem","Typography","DatePicker","habitAPI","jsxDEV","_jsxDEV","LogHabitDialog","open","onClose","habit","onSuccess","_s","formData","setFormData","date","Date","count","loading","setLoading","error","setError","handleDateChange","prev","handleInputChange","e","name","value","target","handleSubmit","logData","toISOString","Number","logCompletion","id","_error$response","_error$response$data","console","response","data","resetForm","handleClose","fullWidth","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","pt","display","flexDirection","gap","label","onChange","slotProps","textField","maxDate","type","inputProps","min","helperText","targetCount","frequency","color","variant","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/mike/Projects/habit-tracker/client/src/components/LogHabitDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Box,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { habitAPI } from '../services/api';\n\n/**\n * Dialog component for logging habit completions\n */\nconst LogHabitDialog = ({ open, onClose, habit, onSuccess }) => {\n  const [formData, setFormData] = useState({\n    date: new Date(),\n    count: 1\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleDateChange = (date) => {\n    setFormData((prev) => ({ ...prev, date }));\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setLoading(true);\n      setError('');\n\n      // Format the data for API\n      const logData = {\n        date: formData.date.toISOString(),\n        count: Number(formData.count)\n      };\n\n      // Call API to log completion\n      await habitAPI.logCompletion(habit.id, logData);\n      \n      // Success callback\n      if (onSuccess) {\n        onSuccess();\n      }\n      \n      // Close dialog\n      onClose();\n    } catch (error) {\n      console.error('Error logging habit completion:', error);\n      setError(error.response?.data?.error || 'Failed to log habit completion');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      date: new Date(),\n      count: 1\n    });\n    setError('');\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      fullWidth\n      maxWidth=\"xs\"\n    >\n      <DialogTitle>\n        Log Completion: {habit?.name}\n      </DialogTitle>\n      \n      <DialogContent>\n        <Box sx={{ pt: 1, display: 'flex', flexDirection: 'column', gap: 2 }}>\n          <DatePicker\n            label=\"Completion Date\"\n            value={formData.date}\n            onChange={handleDateChange}\n            slotProps={{ textField: { fullWidth: true } }}\n            maxDate={new Date()}\n          />\n          \n          <TextField\n            name=\"count\"\n            label=\"Completion Count\"\n            type=\"number\"\n            value={formData.count}\n            onChange={handleInputChange}\n            fullWidth\n            inputProps={{ min: 1 }}\n            helperText={`Target: ${habit?.targetCount || 1} per ${habit?.frequency}`}\n          />\n          \n          {error && (\n            <Typography color=\"error\" variant=\"body2\">\n              {error}\n            </Typography>\n          )}\n        </Box>\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={handleClose} disabled={loading}>\n          Cancel\n        </Button>\n        <Button \n          onClick={handleSubmit} \n          variant=\"contained\" \n          color=\"primary\"\n          disabled={loading}\n        >\n          {loading ? 'Saving...' : 'Log Completion'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default LogHabitDialog; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}