{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include authentication token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Habit API methods\nexport const habitAPI = {\n  // Get all habits\n  getHabits: () => api.get('/habits'),\n  // Get a single habit\n  getHabit: id => api.get(`/habits/${id}`),\n  // Create a new habit\n  createHabit: habitData => api.post('/habits', habitData),\n  // Update a habit\n  updateHabit: (id, habitData) => api.put(`/habits/${id}`, habitData),\n  // Delete a habit\n  deleteHabit: id => api.delete(`/habits/${id}`),\n  // Log a habit completion\n  logCompletion: (id, logData) => api.post(`/habits/${id}/log`, logData)\n};\n\n// Category API methods\nexport const categoryAPI = {\n  // Get all categories\n  getCategories: () => api.get('/categories'),\n  // Create a new category\n  createCategory: categoryData => api.post('/categories', categoryData),\n  // Update a category\n  updateCategory: (id, categoryData) => api.put(`/categories/${id}`, categoryData),\n  // Delete a category\n  deleteCategory: id => api.delete(`/categories/${id}`)\n};\n\n// Stats API methods\nexport const statsAPI = {\n  // Get basic stats\n  getStats: (startDate, endDate) => {\n    const params = {};\n    if (startDate) params.startDate = startDate;\n    if (endDate) params.endDate = endDate;\n    return api.get('/stats', {\n      params\n    });\n  },\n  // Get comprehensive habit report\n  getHabitReport: (startDate, endDate, categoryId) => {\n    const params = {\n      startDate,\n      endDate\n    };\n    if (categoryId) params.categoryId = categoryId;\n    return api.get('/stats/report', {\n      params\n    });\n  },\n  // Get consistency score for a habit\n  getConsistencyScore: (habitId, startDate, endDate) => {\n    return api.get(`/stats/consistency/${habitId}`, {\n      params: {\n        startDate,\n        endDate\n      }\n    });\n  }\n};\n\n// Auth API methods\nexport const authAPI = {\n  // Login\n  login: credentials => api.post('/auth/login', credentials),\n  // Register\n  register: userData => api.post('/auth/register', userData),\n  // Get current user\n  getCurrentUser: () => api.get('/auth/me')\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","habitAPI","getHabits","get","getHabit","id","createHabit","habitData","post","updateHabit","put","deleteHabit","delete","logCompletion","logData","categoryAPI","getCategories","createCategory","categoryData","updateCategory","deleteCategory","statsAPI","getStats","startDate","endDate","params","getHabitReport","categoryId","getConsistencyScore","habitId","authAPI","login","credentials","register","userData","getCurrentUser"],"sources":["/Users/mike/Projects/habit-tracker/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to include authentication token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Habit API methods\nexport const habitAPI = {\n  // Get all habits\n  getHabits: () => api.get('/habits'),\n  \n  // Get a single habit\n  getHabit: (id) => api.get(`/habits/${id}`),\n  \n  // Create a new habit\n  createHabit: (habitData) => api.post('/habits', habitData),\n  \n  // Update a habit\n  updateHabit: (id, habitData) => api.put(`/habits/${id}`, habitData),\n  \n  // Delete a habit\n  deleteHabit: (id) => api.delete(`/habits/${id}`),\n  \n  // Log a habit completion\n  logCompletion: (id, logData) => api.post(`/habits/${id}/log`, logData),\n};\n\n// Category API methods\nexport const categoryAPI = {\n  // Get all categories\n  getCategories: () => api.get('/categories'),\n  \n  // Create a new category\n  createCategory: (categoryData) => api.post('/categories', categoryData),\n  \n  // Update a category\n  updateCategory: (id, categoryData) => api.put(`/categories/${id}`, categoryData),\n  \n  // Delete a category\n  deleteCategory: (id) => api.delete(`/categories/${id}`),\n};\n\n// Stats API methods\nexport const statsAPI = {\n  // Get basic stats\n  getStats: (startDate, endDate) => {\n    const params = {};\n    if (startDate) params.startDate = startDate;\n    if (endDate) params.endDate = endDate;\n    return api.get('/stats', { params });\n  },\n  \n  // Get comprehensive habit report\n  getHabitReport: (startDate, endDate, categoryId) => {\n    const params = { startDate, endDate };\n    if (categoryId) params.categoryId = categoryId;\n    return api.get('/stats/report', { params });\n  },\n  \n  // Get consistency score for a habit\n  getConsistencyScore: (habitId, startDate, endDate) => {\n    return api.get(`/stats/consistency/${habitId}`, {\n      params: { startDate, endDate }\n    });\n  }\n};\n\n// Auth API methods\nexport const authAPI = {\n  // Login\n  login: (credentials) => api.post('/auth/login', credentials),\n  \n  // Register\n  register: (userData) => api.post('/auth/register', userData),\n  \n  // Get current user\n  getCurrentUser: () => api.get('/auth/me'),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}